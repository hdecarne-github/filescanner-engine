/*
 * Copyright (c) 2007-2018 Holger de Carne and contributors, All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.carne.filescanner.engine.transfer;

import java.io.Closeable;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

import de.carne.boot.check.Check;

/**
 * Class used to output file scanner results in a generic manner to different kind of outputs.
 */
public final class FileScannerResultOutput implements Closeable {

	private final Renderer renderer;
	private final Set<RenderOption> options = new HashSet<>();
	private boolean prepared = false;
	private RenderStyle currentStyle = RenderStyle.NORMAL;

	/**
	 * Constructs a new {@linkplain FileScannerResultOutput} instance.
	 *
	 * @param renderer the {@linkplain Renderer} to use for output generation.
	 */
	public FileScannerResultOutput(Renderer renderer) {
		this.renderer = renderer;
	}

	/**
	 * Checks whether no output has yet been generated by this instance.
	 *
	 * @return {@code true} if no output has yet been generated by this instance.
	 */
	public boolean isEmpty() {
		return !this.prepared;
	}

	/**
	 * Enables the given {@linkplain RenderOption}.
	 * <p>
	 * Render options can only be changed before the first output is generated.
	 *
	 * @param option the {@linkplain RenderOption} to enable.
	 * @return the updated {@linkplain FileScannerResultOutput} for chaining.
	 */
	public FileScannerResultOutput enableOption(RenderOption option) {
		Check.assertTrue(!this.prepared);
		this.options.add(option);
		return this;
	}

	/**
	 * Disables the given {@linkplain RenderOption}.
	 * <p>
	 * Render options can only be changed before the first output is generated.
	 *
	 * @param option the {@linkplain RenderOption} to disable.
	 * @return the updated {@linkplain FileScannerResultOutput} for chaining.
	 */
	public FileScannerResultOutput disableOption(RenderOption option) {
		Check.assertTrue(!this.prepared);
		this.options.remove(option);
		return this;
	}

	/**
	 * Sets the {@linkplain RenderStyle} for subsequent write calls.
	 *
	 * @param style the {@linkplain RenderStyle} to set.
	 * @return the updated {@linkplain FileScannerResultOutput} for chaining.
	 */
	public FileScannerResultOutput setStyle(RenderStyle style) {
		this.currentStyle = style;
		return this;
	}

	/**
	 * Writes simple text to the output using the currently selected {@linkplain RenderStyle}.
	 *
	 * @param text the text to write.
	 * @return the updated {@linkplain FileScannerResultOutput} for chaining.
	 * @throws IOException if an I/O error occurs.
	 * @throws InterruptedException if the rendering thread is interrupted.
	 */
	public FileScannerResultOutput write(String text) throws IOException, InterruptedException {
		prepareIfNeeded();
		this.renderer.emitText(this.currentStyle, text, false);
		return this;
	}

	/**
	 * Writes simple text as well as a line break to the output using the currently selected {@linkplain RenderStyle}.
	 *
	 * @param text the text to write.
	 * @return the updated {@linkplain FileScannerResultOutput} for chaining.
	 * @throws IOException if an I/O error occurs.
	 * @throws InterruptedException if the rendering thread is interrupted.
	 */
	public FileScannerResultOutput writeln(String text) throws IOException, InterruptedException {
		prepareIfNeeded();
		this.renderer.emitText(this.currentStyle, text, true);
		return this;
	}

	/**
	 * Writes a line break to the output.
	 *
	 * @return the updated {@linkplain FileScannerResultOutput} for chaining.
	 * @throws IOException if an I/O error occurs.
	 * @throws InterruptedException if the rendering thread is interrupted.
	 */
	public FileScannerResultOutput writeln() throws IOException, InterruptedException {
		prepareIfNeeded();
		this.renderer.emitText(this.currentStyle, "", true);
		return this;
	}

	@Override
	public void close() throws IOException {
		if (this.prepared) {
			try {
				this.renderer.emitEpilouge();
			} catch (InterruptedException e) {
				Thread.currentThread().interrupt();
				throw new IOException(e);
			}
		}
		this.renderer.close();
	}

	private void prepareIfNeeded() throws IOException, InterruptedException {
		if (!this.prepared) {
			this.renderer.emitPrologue(this.options);
			this.prepared = true;
		}
	}

}
