/*
 * Copyright (c) 2007-2019 Holger de Carne and contributors, All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//
// PNG file format: https://en.wikipedia.org/wiki/Portable_Network_Graphics
//

// Symbols

COLOR_TYPE_SYMBOLS:
byte_symbols {
	0: "Grayscale"
	2: "RGB"
	3: "Palette"
	4: "Grayscale + Alpha"
	6: "RGB + Alpha"
}

COMPRESSION_METHOD_SYMBOLS:
byte_symbols {
	0: "deflate/inflate compression"
}

FILTER_METHOD_SYMBOLS:
byte_symbols {
	0: "adaptive filtering"
}

INTERLACE_METHOD_SYMBOLS:
byte_symbols {
	0: "no interlace"
	1: "Adam7 interlace"
}

// Specs

PNG_FILE_SIGNATURE:
struct "PNG file signature" {
	byte[8] "signature"
		->validate({ 0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a })
}	->bigEndian()

PNG_IHDR_CHUNK:
struct "IHDR chunk" {
	dword "Length"
		->validate(13)
	dword "Chunk Type"
		->validate(0x49484452)
	dword "Width"
		->format(@PrettyFormat)
	dword "Height"
		->format(@PrettyFormat)
	byte "Bit depth"
		->format(@PrettyFormat)
	byte "Color type"
		->renderer(@COLOR_TYPE_SYMBOLS)
	byte "Compression method"
		->renderer(@COMPRESSION_METHOD_SYMBOLS)
	byte "Filter method"
		->renderer(@FILTER_METHOD_SYMBOLS)
	byte "Interlace method"
		->renderer(@INTERLACE_METHOD_SYMBOLS)
	dword "CRC"
}	->bigEndian()

PNG_IEND_CHUNK:
struct "IEND chunk" {
	dword "Length"
		->validate(0)
	dword "Chunk Type"
		->validate(0x49454e44)
	dword "CRC"
}	->bigEndian()

PNG_GENERIC_CHUNK:
struct #genericChunkName {
CHUNK_LENGTH:
	dword "Length"
CHUNK_TYPE:
	dword "Chunk Type"
	range[@CHUNK_LENGTH] "Chunk Data"
	dword "CRC"
}	->bigEndian()

PNG_CHUNK:
union {
	@PNG_IHDR_CHUNK
	@PNG_IEND_CHUNK
	@PNG_GENERIC_CHUNK
}	->bigEndian()


PNG_FORMAT:
format_spec "PNG image data" {
	@PNG_FILE_SIGNATURE
	sequence @PNG_CHUNK
		->stopAfter(@PNG_IEND_CHUNK)
}	->bigEndian()
	->renderer(#pngRenderer)
	->export(#pngExporter)
