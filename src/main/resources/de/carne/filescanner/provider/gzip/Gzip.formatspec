/*
 * Copyright (c) 2007-2021 Holger de Carne and contributors, All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//
// Gzip file format: https://en.wikipedia.org/wiki/Gzip
//

// Symbols

FLG_SYMBOLS:
byte_flag_symbols {
   0x10: "FCOMMENT"
   0x08: "FNAME"
   0x04: "FEXTRA"
   0x02: "FHCRC"
   0x01: "FTEXT"
}

CM_SYMBOLS:
byte_symbols {
	8: "deflate"
}

OS_SYMBOLS:
byte_symbols {
	0: "FAT filesystem (MS-DOS, OS/2, NT/Win32)"
	1: "Amiga"
	2: "VMS (or OpenVMS)"
	3: "Unix"
	4: "VM/CMS"
	5: "Atari TOS"
	6: "HPFS filesystem (OS/2, NT)"
	7: "Macintosh"
	8: "Z-System"
	9: "CP/M"
	10: "TOPS-20"
	11: "NTFS filesystem (NT)"
	12: "QDOS"
	13: "Acorn RISCOS"
	255: "unknown"
}

// Specs

GZIP_HEADER_FEXTRA:
struct {
FEXTRA_XLEN:
	word "XLEN"
	byte[@FEXTRA_XLEN] "extra field"
}

GZIP_HEADER_FNAME:
struct {
HEADER_FNAME@GZIP_ARCHIVE:
	string "FNAME"
}

GZIP_HEADER_FCOMMENT:
struct {
	string "FCOMMENT"
}

GZIP_HEADER_FHCRC:
struct {
	word "CRC16"
}

GZIP_HEADER:
struct "Header" {
	byte[2] "ID"
		->validate({ 0x1f, 0x8b })
	byte "CM"
		->validate(@CM_SYMBOLS)
		->renderer(@CM_SYMBOLS)
HEADER_FLG@GZIP_ARCHIVE:
	byte "FLG"
		->renderer(@FLG_SYMBOLS)
	dword "MTIME"
	byte "XFL"
	byte "OS"
		->validate(@OS_SYMBOLS)
		->renderer(@OS_SYMBOLS)
	conditional #fextraSpec {
		@GZIP_HEADER_FEXTRA
	}
	conditional #fnameSpec {
		@GZIP_HEADER_FNAME
	}
	conditional #fcommentSpec {
		@GZIP_HEADER_FCOMMENT
	}
	conditional #fhcrcSpec {
		@GZIP_HEADER_FHCRC
	}
}

GZIP_TRAILER:
struct "Trailer" {
	dword "CRC32"
	dword "ISIZE"
		->format(@PrettyFormat)
		->renderer(@SizeRenderer)
}

GZIP_ARCHIVE:
format_spec "Gzip archive" {
	@GZIP_HEADER
	encoded #gzipEncodedInputConfig
	@GZIP_TRAILER
}
