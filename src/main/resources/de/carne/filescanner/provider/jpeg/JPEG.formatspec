/*
 * Copyright (c) 2007-2019 Holger de Carne and contributors, All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//
// JPEG file format: https://en.wikipedia.org/wiki/JPEG
//

// Symbols

APP0_VERSIONS:
word_symbols {
	0x0101: "1.01"
	0x0102: "1.02"
}

APP0_UNITS:
byte_symbols {
	0: "no units, X and Y specify the pixel aspect ratio"
	1: "X and Y are dots per inch"
	2: "X and Y are dots per cm"
}

// Specs

JPEG_SOI_APP0_MARKER:
struct {
	struct "SOI marker" {
		word "marker"
			->validate(0xffd8)
	}	->bigEndian()
	struct "APP0 marker" {
		word "marker"
			->validate(0xffe0)
		word "length"
			->validate(0x0010)
		char[5] "identifier"
			->validate("JFIF\u0000")
		word "version"
			->validate(@APP0_VERSIONS)
			->renderer(@APP0_VERSIONS)
		byte "units"
			->renderer(@APP0_UNITS)
		word "Xdensity"
			->format(@PrettyFormat)
		word "Ydensity"
			->format(@PrettyFormat)
X_THUMBNAIL:
		byte "Xthumbnail"
			->format(@PrettyFormat)
Y_THUMBNAIL:
		byte "Ythumbnail"
			->format(@PrettyFormat)
		range[#getAPP0ThumbnailSize] "thumbnail"
	}	->bigEndian()
}	->bigEndian()

JPEG_SOS_MARKER:
struct "SOS marker" {
	word "marker"
		->validate(0xffda)
	word "length"
	scan #scanSosConfig
		->bigEndian()
}	->bigEndian()

JPEG_EOI_MARKER:
struct "EOI marker" {
		word "marker"
			->validate(0xffd9)
}	->bigEndian()

JPEG_GENERIC_MARKER:
struct text("%x marker", @GENERIC_MARKER) {
GENERIC_MARKER:
	word "marker"
GENERIC_LENGTH:
	word "length"
	range[#getGenericDataSize] "data"
}	->bigEndian()

JPEG_MARKER:
union {
	@JPEG_SOS_MARKER
	@JPEG_EOI_MARKER
	@JPEG_GENERIC_MARKER
}

JPEG_FORMAT:
format_spec "JPEG image data" {
	@JPEG_SOI_APP0_MARKER
	sequence @JPEG_MARKER
		->stopAfter(@JPEG_EOI_MARKER)
}	->bigEndian()
