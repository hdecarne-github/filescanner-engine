/*
 * Copyright (c) 2007-2021 Holger de Carne and contributors, All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//
// Executable and Linkable Format: https://en.wikipedia.org/wiki/Executable_and_Linkable_Format
//

// Symbols

EI_CLASS:
byte_symbols {
	0x00: "ELFCLASSNONE"
	0x01: "ELFCLASS32"
	0x02: "ELFCLASS64"
}

EI_DATA:
byte_symbols {
	0x00: "ELFDATANONE"
	0x01: "ELFDATA2LSB"
	0x02: "ELFDATA2MSB"
}

EI_VERSION:
byte_symbols {
	0x00: "EV_NONE"
	0x01: "EV_CURRENT"
}

EI_OSABI:
byte_symbols {
	0x00: "ELFOSABI_SYSV"
	0x01: "ELFOSABI_HPUX"
	0x02: "ELFOSABI_NETBSD"
	0x03: "ELFOSABI_LINUX"
	0x06: "ELFOSABI_SOLARIS"
	0x08: "ELFOSABI_IRIX"
	0x09: "ELFOSABI_FREEBSD"
	0x0a: "ELFOSABI_TRU64"
	0x51: "ELFOSABI_ARM"
	0xff: "ELFOSABI_STANDALONE"
}

E_TYPE:
word_symbols {
	0x0000: "ET_NONE"
	0x0001: "ET_REL"
	0x0002: "ET_EXEC"
	0x0003: "ET_DYN"
	0x0004: "ET_CORE"
}

E_MACHINE:
word_symbols {
	0x0000: "ET_NONE"
	0x0001: "EM_M32"
	0x0003: "EM_SPARC"
	0x0004: "EM_386"
	0x0005: "EM_68K"
	0x0006: "EM_88K"
	0x0007: "EM_860"
	0x0008: "EM_MIPS"
	0x000f: "EM_PARISC"
	0x0012: "EM_SPARC32PLUS"
	0x0014: "EM_PPC"
	0x0015: "EM_PPC64"
	0x0016: "EM_S390"
	0x0028: "EM_ARM"
	0x002a: "EM_SH"
	0x002b: "EM_SPARCV9"
	0x0032: "EM_IA_64"
	0x003e: "EM_X86_64"
	0x0049: "EM_VAX"
}

E_VERSION:
dword_symbols {
	0x00000000: "EV_NONE"
	0x00000001: "EV_CURRENT"
}

P_TYPE:
dword_symbols {
	0x00000000: "PT_NULL"
	0x00000001: "PT_LOAD"
	0x00000002: "PT_DYNAMIC"
	0x00000003: "PT_INTERP"
	0x00000004: "PT_NOTE"
	0x00000005: "PT_SHLIB"
	0x00000006: "PT_PHDR"
	0x00000007: "PT_TLS"
	0x6474e550: "PT_GNU_EH_FRAME"
	0x6474e551: "PT_GNU_STACK"
	0x6474e552: "PT_GNU_RELRO"
}

P_FLAGS:
dword_flag_symbols {
	0x00000004: "PF_R"
	0x00000002: "PF_W"
	0x00000001: "PF_X"
}

SH_TYPE:
dword_symbols {
	0x00000000: "SHT_NULL"
	0x00000001: "SHT_PROGBITS"
	0x00000002: "SHT_SYMTAB"
	0x00000003: "SHT_STRTAB"
	0x00000004: "SHT_RELA"
	0x00000005: "SHT_HASH"
	0x00000006: "SHT_DYNAMIC"
	0x00000007: "SHT_NOTE"
	0x00000008: "SHT_NOBITS"
	0x00000009: "SHT_REL"
	0x0000000a: "SHT_SHLIB"
	0x0000000b: "SHT_DYNSYM"
	0x0000000e: "SHT_INIT_ARRAY"
	0x0000000f: "SHT_FINI_ARRAY"
	0x00000010: "SHT_PREINIT_ARRAY"
	0x00000011: "SHT_GROUP"
	0x00000012: "SHT_SYMTAB_SHNDX"
}

SH_FLAGS:
qword_flag_symbols {
	0x0000000000000400: "SHF_TLS"
	0x0000000000000200: "SHF_GROUP"
	0x0000000000000100: "SHF_OS_NONCONFORMING"
	0x0000000000000080: "SHF_LINK_ORDER"
	0x0000000000000040: "SHF_INFO_LINK"
	0x0000000000000020: "SHF_STRINGS"
	0x0000000000000010: "SHF_MERGE"
	0x0000000000000004: "SHF_EXECINSTR"
	0x0000000000000002: "SHF_ALLOC"
	0x0000000000000001: "SHF_WRITE"
}

// Specs

ELF_HEADER_64:
struct "Elf64_Ehdr" {
	byte[4] "e_ident[EI_MAG]"
		->validate({ 0x7f, 0x45, 0x4c, 0x46})
	byte "e_ident[EI_CLASS]"
		->validate(@EI_CLASS)
		->renderer(@EI_CLASS)
	byte "e_ident[EI_DATA]"
		->validate(@EI_DATA)
		->renderer(@EI_DATA)
	byte "e_ident[EI_VERSION]"
		->validate(@EI_VERSION)
		->renderer(@EI_VERSION)
	byte "e_ident[EI_OSABI]"
		->validate(@EI_OSABI)
		->renderer(@EI_OSABI)
	byte "e_ident[EI_OSABI]"
	byte[7] "e_ident[EI_PAD]"
		->validate({ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
	word "e_type"
		->validate(@E_TYPE)
		->renderer(@E_TYPE)
ELF_MACHINE_64@ELF_FORMAT:
	word "e_machine"
		->renderer(@E_MACHINE)
	dword "e_version"
		->renderer(@E_VERSION)
	qword "e_entry"
PHEADER_OFF_64@ELF_FORMAT:
	qword "e_phoff"
		->link()
SHEADER_OFF_64@ELF_FORMAT:
	qword "e_shoff"
		->link()
	dword "e_flags"
	word "e_ehsize"
		->validate(0x40)
		->format(@PrettyFormat)
		->renderer(@SizeRenderer)
	word "e_phentsize"
		->validate(0x38)
		->format(@PrettyFormat)
		->renderer(@SizeRenderer)
PHEADER_NUM_64@ELF_FORMAT:
	word "e_phnum"
		->format(@PrettyFormat)
	word "e_shentsize"
		->format(@PrettyFormat)
		->renderer(@SizeRenderer)
SHEADER_NUM_64@ELF_FORMAT:
	word "e_shnum"
		->format(@PrettyFormat)
	word "e_shstrndx"
		->format(@PrettyFormat)
}

ELF_PHEADER_64:
struct "Elf64_Phdr" {
	dword "p_type"
		->renderer(@P_TYPE)
	dword "p_flags"
		->renderer(@P_FLAGS)
	qword "p_offset"
		->link()
	qword "p_vaddr"
	qword "p_paddr"
	qword "p_filesz"
		->format(@PrettyFormat)
		->renderer(@SizeRenderer)
	qword "p_memsz"
		->format(@PrettyFormat)
		->renderer(@SizeRenderer)
	qword "p_align"
}

ELF_SHEADER_64:
struct "Elf64_Shdr" {
	dword "sh_name"
SHEADER_TYPE_64@ELF_FORMAT:
	dword "sh_type"
		->renderer(@SH_TYPE)
SHEADER_FLAGS_64@ELF_FORMAT:
	qword "sh_flags"
		->renderer(@SH_FLAGS)
	qword "sh_addr"
SHEADER_OFFSET_64:
	qword "sh_offset"
		->link()
SHEADER_SIZE_64@ELF_FORMAT:
	qword "sh_size"
		->format(@PrettyFormat)
		->renderer(@SizeRenderer)
	dword "sh_link"
	dword "sh_info"
	qword "sh_addralign"
	qword "sh_entsize"
		->format(@PrettyFormat)
		->renderer(@SizeRenderer)
	decode_at #section64Offset:2 struct "Section" {
		range[#section64Size] ""
	}	->renderer(#section64Renderer)
		->export(#section64Exporter)
}

ELF_IMAGE_64:
struct {
	@ELF_HEADER_64
	decode_at @PHEADER_OFF_64 struct "Program header table" {
		sequence @ELF_PHEADER_64
			->size(@PHEADER_NUM_64)
	}
	decode_at @SHEADER_OFF_64 struct "Section header table" {
		sequence @ELF_SHEADER_64
			->size(@SHEADER_NUM_64)
	}
}

ELF_FORMAT:
format_spec "ELF image" {
	@ELF_IMAGE_64
}
