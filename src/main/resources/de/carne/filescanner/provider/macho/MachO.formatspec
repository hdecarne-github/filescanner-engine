/*
 * Copyright (c) 2007-2021 Holger de Carne and contributors, All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//
// Mach-O executable file format: https://en.wikipedia.org/wiki/Mach-O
//

// Symbols

MACH_CPUTYPE:
dword_symbols {
	0x1: "CPU_TYPE_VAX"
	0x2: "CPU_TYPE_ROMP"
	0x4: "CPU_TYPE_NS32032"
	0x5: "CPU_TYPE_NS32332"
	0x6: "CPU_TYPE_MC680x0"
	0x7: "CPU_TYPE_I386"
	0x8: "CPU_TYPE_MIPS"
	0x9: "CPU_TYPE_NS32532"
	0xb: "CPU_TYPE_HPPA"
	0xc: "CPU_TYPE_ARM"
	0xd: "CPU_TYPE_MC88000"
	0xe: "CPU_TYPE_SPARC"
	0xf: "CPU_TYPE_I860"
	0x10: "CPU_TYPE_I860_LITTLE"
	0x11: "CPU_TYPE_RS6000"
	0x12: "CPU_TYPE_POWERPC"
	0xff: "CPU_TYPE_VEO"
	0x1000007: "CPU_TYPE_X86_64"
	0x1000012: "CPU_TYPE_POWERPC64"
	0x100000c: "CPU_TYPE_ARM64"
	0x200000c: "CPU_TYPE_ARM64_32"
	0xffffffff: "CPU_TYPE_ANY"
}

MACH_FILETYPE:
dword_symbols {
	0x1: "MH_OBJECT"
	0x2: "MH_EXECUTE"
	0x3: "MH_FVMLIB"
	0x4: "MH_CORE"
	0x5: "MH_PRELOAD"
	0x6: "MH_DYLIB"
	0x7: "MH_DYLINKER"
	0x8: "MH_BUNDLE"
	0x9: "MH_DYLIB_STUB"
	0xa: "MH_DSYM"
	0xb: "MH_KEXT_BUNDLE"
}

MACH_FLAGS:
dword_flag_symbols {
	0x08000000: "MH_SIM_SUPPORT"
	0x04000000: "MH_NLIST_OUTOFSYNC_WITH_DYLDINFO" 
	0x02000000: "MH_APP_EXTENSION_SAFE"
	0x01000000: "MH_NO_HEAP_EXECUTION" 
	0x00800000: "MH_HAS_TLV_DESCRIPTORS"  
	0x00400000: "MH_DEAD_STRIPPABLE_DYLIB"
	0x00200000: "MH_PIE"
	0x00100000: "MH_NO_REEXPORTED_DYLIBS" 
	0x00080000: "MH_SETUID_SAFE" 
	0x00040000: "MH_ROOT_SAFE" 
	0x00020000: "MH_ALLOW_STACK_EXECUTION"
	0x00010000: "MH_BINDS_TO_WEAK"
	0x00008000: "MH_WEAK_DEFINES"
	0x00004000: "MH_CANONICAL"
	0x00002000: "MH_SUBSECTIONS_VIA_SYMBOLS"
	0x00001000: "MH_ALLMODSBOUND"
	0x00000800: "MH_PREBINDABLE"
	0x00000400: "MH_NOFIXPREBINDING"
	0x00000200: "MH_NOMULTIDEFS"
	0x00000100: "MH_FORCE_FLAT"
	0x00000080: "MH_TWOLEVEL"
	0x00000040: "MH_LAZY_INIT"
	0x00000020: "MH_SPLIT_SEGS"
	0x00000010: "MH_PREBOUND"
	0x00000008: "MH_BINDATLOAD"
	0x00000004: "MH_DYLDLINK"
	0x00000002: "MH_INCRLINK"
	0x00000001: "MH_NOUNDEFS"
}

MACH_LOAD_COMMAND:
dword_symbols {
	0x1: "LC_SEGMENT"
	0x2: "LC_SYMTAB"
	0x3: "LC_SYMSEG"
	0x4: "LC_THREAD"
	0x5: "LC_UNIXTHREAD"
	0x6: "LC_LOADFVMLIB"
	0x7: "LC_IDFVMLIB"
	0x8: "LC_IDENT"
	0x9: "LC_FVMFILE"
	0xa: "LC_PREPAGE"
	0xb: "LC_DYSYMTAB"
	0xc: "LC_LOAD_DYLIB"
	0xd: "LC_ID_DYLIB"
	0xe: "LC_LOAD_DYLINKER"
	0xf: "LC_ID_DYLINKER"
	0x10: "LC_PREBOUND_DYLIB"
	0x11: "LC_ROUTINES"
	0x12: "LC_SUB_FRAMEWORK"
	0x13: "LC_SUB_UMBRELLA"
	0x14: "LC_SUB_CLIENT"
	0x15: "LC_SUB_LIBRARY"
	0x16: "LC_TWOLEVEL_HINTS"
	0x17: "LC_PREBIND_CKSUM"
	0x80000018: "LC_LOAD_WEAK_DYLIB"
	0x19: "LC_SEGMENT_64"
	0x1a: "LC_ROUTINES_64"
	0x1b: "LC_UUID"
	0x8000001c: "LC_RPATH"
	0x1d: "LC_CODE_SIGNATURE"
	0x1e: "LC_SEGMENT_SPLIT_INFO"
	0x8000001f: "LC_REEXPORT_DYLIB"
	0x20: "LC_LAZY_LOAD_DYLIB"
	0x21: "LC_ENCRYPTION_INFO"
	0x22: "LC_DYLD_INFO"
	0x80000022: "LC_DYLD_INFO_ONLY"
	0x80000023: "LC_LOAD_UPWARD_DYLIB"
	0x24: "LC_VERSION_MIN_MACOSX"
	0x25: "LC_VERSION_MIN_IPHONEOS"
	0x26: "LC_FUNCTION_STARTS"
	0x27: "LC_DYLD_ENVIRONMENT"
	0x80000028: "LC_MAIN"
	0x29: "LC_DATA_IN_CODE"
	0x2a: "LC_SOURCE_VERSION"
	0x2b: "LC_DYLIB_CODE_SIGN_DRS"
	0x2c: "LC_ENCRYPTION_INFO_64"
	0x2d: "LC_LINKER_OPTION"
	0x2e: "LC_LINKER_OPTIMIZATION_HINT"
	0x2f: "LC_VERSION_MIN_TVOS"
	0x30: "LC_VERSION_MIN_WATCHOS"
	0x31: "LC_NOTE"
	0x32: "LC_BUILD_VERSION"
	0x80000033: "LC_DYLD_EXPORTS_TRIE"
	0x80000034: "LC_DYLD_CHAINED_FIXUPS"
}

VM_PROT_FLAGS:
dword_flag_symbols {
	0x4: "VM_PROT_EXECUTE"
	0x2: "VM_PROT_WRITE"
	0x1: "VM_PROT_READ"
}

SEGMENT_FLAGS:
dword_flag_symbols {
	0x10: "SG_READ_ONLY"
	0x8: "SG_PROTECTED_VERSION_1"
	0x4: "SG_NORELOC"
	0x2: "SG_FVMLIB"
	0x1: "SG_HIGHVM"
}

// Specs

MACH_HEADER_64:
struct "mach_header_64" {
	dword "magic"
		->validate(0xfeedfacf)
CPU_TYPE@MACHO_FORMAT:
	dword "cputype"
		->renderer(@MACH_CPUTYPE)
	dword "cpusubtype"
	dword "filetype"
		->renderer(@MACH_FILETYPE)
NUMBER_OF_CMDS@MACHO_FORMAT:
	dword "ncmds"
		->format(@PrettyFormat)
SIZE_OF_CMDS@MACHO_FORMAT:
	dword "sizeofcmds"
		->renderer(@SizeRenderer)
	dword "flags"
		->renderer(@MACH_FLAGS)
	dword "reserved"
}

SEGMENT_COMMAND_64:
struct text("segment_command_64 [%s]", @SEGMENT_NAME) {
	dword "cmd"
		->validate(0x19)
			->renderer(@MACH_LOAD_COMMAND)
	dword "cmdsize"
		->renderer(@SizeRenderer)
SEGMENT_NAME@MACHO_FORMAT:
	char[16] "segname"
	qword "vmaddr"
	qword "vmsize"
		->renderer(@SizeRenderer)
SEGMENT64_OFFSET@MACHO_FORMAT:
	qword "fileoff"
		->link()
SEGMENT64_SIZE@MACHO_FORMAT:
	qword "filesize"
		->renderer(@SizeRenderer)
	dword "maxprot"
		->renderer(@VM_PROT_FLAGS)
SEGMENT64_FLAGS@MACHO_FORMAT:
	dword "initprot"
		->renderer(@VM_PROT_FLAGS)
NUMBER_OF_SECTIONS:
	dword "nsects"
		->format(@PrettyFormat)
	dword "flags"
		->renderer(@SEGMENT_FLAGS)
	sequence struct text("section_64 [%s]", @SECTION_NAME) {
	SECTION_NAME:
		char[16] "sectname"
		char[16] "segname"
		qword "addr"
		qword "size"
			->renderer(@SizeRenderer)
		dword "offset"
			->link()
		dword "align"
		dword "reloff"
		dword "nreloc"
			->format(@PrettyFormat)
		dword "flags"
		dword "reserved1"
		dword "reserved2"
		dword "reserved3"
	}	->size(@NUMBER_OF_SECTIONS)
	decode_at #segment64Position:2 struct text("segment_64 [%s]", @SEGMENT_NAME) {
		range[#segment64Size] ""
	}	->renderer(#segment64Renderer)
		->export(#segment64Exporter)
}

LOAD_COMMAND:
union {
	@SEGMENT_COMMAND_64
	struct "load_command" {
		dword "cmd"
			->renderer(@MACH_LOAD_COMMAND)
	CMD_SIZE:
		dword "cmdsize"
			->renderer(@SizeRenderer)
		range[#cmdSize] ""
	}
}

MACHO_IMAGE_64:
struct {
	@MACH_HEADER_64
	struct "load_commands" {
		sequence @LOAD_COMMAND
			->size(@NUMBER_OF_CMDS)
	}
}

MACHO_FORMAT:
format_spec "Mach-O image" {
	@MACHO_IMAGE_64
}
