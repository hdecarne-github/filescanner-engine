// committed:FORMAT:ELF image[0000000000000000h-0000000000104690h]
start = 0000000000000000h
end = 0000000000104690h
size = 1.066.640 // 1,017 MiB
// Export handler: Raw
// committed:FORMAT:Elf64_Ehdr[0000000000000000h-0000000000000040h]
e_ident[EI_MAG] = { 7fh, 45h, 4ch, 46h }
e_ident[EI_CLASS] = 02h // ELFCLASS64
e_ident[EI_DATA] = 01h // ELFDATA2LSB
e_ident[EI_VERSION] = 01h // EV_CURRENT
e_ident[EI_OSABI] = 00h // ELFOSABI_SYSV
e_ident[EI_OSABI] = 00h
e_ident[EI_PAD] = { 00h, 00h, 00h, 00h, 00h, 00h, 00h }
e_type = 0002h // ET_EXEC
e_machine = 003eh // EM_X86_64
e_version = 00000001h // EV_CURRENT
e_entry = 0000000000404f27h
e_phoff = 0000000000000040h
e_shoff = 0000000000104390h
e_flags = 00000000h
e_ehsize = 64 // 64 byte
e_phentsize = 56 // 56 byte
e_phnum = 4
e_shentsize = 64 // 64 byte
e_shnum = 12
e_shstrndx = 11
// Export handler: Raw
// committed:FORMAT:Program header table[0000000000000040h-0000000000000120h]
start = 0000000000000040h
end = 0000000000000120h
size = 224 // 224 byte
// Export handler: Raw
// committed:FORMAT:Elf64_Phdr[0000000000000040h-0000000000000078h]
p_type = 00000001h // PT_LOAD
p_flags = 00000005h
.............................1.. // PF_R
..............................0. // PF_W
...............................1 // PF_X
p_offset = 0000000000000000h
p_vaddr = 0000000000400000h
p_paddr = 0000000000400000h
p_filesz = 1.064.184 // 1,015 MiB
p_memsz = 1.064.184 // 1,015 MiB
p_align = 0000000000200000h
// Export handler: Raw
// committed:FORMAT:Elf64_Phdr[0000000000000078h-00000000000000b0h]
p_type = 00000001h // PT_LOAD
p_flags = 00000006h
.............................1.. // PF_R
..............................1. // PF_W
...............................0 // PF_X
p_offset = 0000000000103fd8h
p_vaddr = 0000000000703fd8h
p_paddr = 0000000000703fd8h
p_filesz = 871 // 871 byte
p_memsz = 7.792 // 7,609 KiB
p_align = 0000000000200000h
// Export handler: Raw
// committed:FORMAT:Elf64_Phdr[00000000000000b0h-00000000000000e8h]
p_type = 6474e551h // PT_GNU_STACK
p_flags = 00000006h
.............................1.. // PF_R
..............................1. // PF_W
...............................0 // PF_X
p_offset = 0000000000000000h
p_vaddr = 0000000000000000h
p_paddr = 0000000000000000h
p_filesz = 0 // 0 byte
p_memsz = 0 // 0 byte
p_align = 0000000000000010h
// Export handler: Raw
// committed:FORMAT:Elf64_Phdr[00000000000000e8h-0000000000000120h]
p_type = 6474e552h // PT_GNU_RELRO
p_flags = 00000004h
.............................1.. // PF_R
..............................0. // PF_W
...............................0 // PF_X
p_offset = 0000000000103fd8h
p_vaddr = 0000000000703fd8h
p_paddr = 0000000000703fd8h
p_filesz = 40 // 40 byte
p_memsz = 40 // 40 byte
p_align = 0000000000000001h
// Export handler: Raw
// committed:FORMAT:Section[0000000000000120h-000000000000012dh]
0000000000000000: push zvq
0000000000000001: call +330 ; 0000000000000150
0000000000000006: call +19909 ; 0000000000004dd0
000000000000000b: pop zvq
000000000000000c: retn
// Export handler: Raw
// Export handler: x86-64 instructions
// committed:FORMAT:Section[0000000000000130h-00000000000d3e39h]
0000000000000000: sub rsp, 0x18
0000000000000004: xor eax, eax
0000000000000006: mov [esp+12], edi
000000000000000a: call +767578 ; 00000000000bb669
000000000000000f: call +767574 ; 00000000000bb66a
0000000000000014: xor eax, eax
0000000000000016: call +866836 ; 00000000000d3a2f
000000000000001b: mov edi, [esp+12]
000000000000001f: call +856355 ; 00000000000d1147
0000000000000024: db 0x2e
hint_nop [eax+0+eax]
000000000000002e: nop
0000000000000030: mov eax, 0x00704347
0000000000000035: push ebp
0000000000000036: db 0x2d
0000000000000038: jo +0 ; 000000000000003c
000000000000003c: cmp rax, 0x0e
0000000000000040: mov rbp, rsp
0000000000000043: jbe +27 ; 0000000000000060
0000000000000045: mov eax, 0x00000000
000000000000004a: test rax, rax
000000000000004d: jz +17 ; 0000000000000060
000000000000004f: pop ebp
0000000000000050: mov edi, 0x00704340
0000000000000055: jmp rax
0000000000000057: hint_nop [eax+0+eax]
0000000000000060: pop ebp
0000000000000061: retn
0000000000000062: hint_nop [eax+0]
0000000000000066: db 0x2e
hint_nop [eax+0+eax]
0000000000000070: mov esi, 0x00704340
0000000000000075: push ebp
0000000000000076: sub rsi, 0x00704340
000000000000007d: sar rsi, 0x03
0000000000000081: mov rbp, rsp
0000000000000084: mov rax, rsi
0000000000000087: shr rax, 0x3f
000000000000008b: add rsi, rax
000000000000008e: sar rsi, 1
0000000000000091: jz +21 ; 00000000000000a8
0000000000000093: mov eax, 0x00000000
0000000000000098: test rax, rax
000000000000009b: jz +11 ; 00000000000000a8
000000000000009d: pop ebp
000000000000009e: mov edi, 0x00704340
00000000000000a3: jmp rax
00000000000000a5: hint_nop [eax]
00000000000000a8: pop ebp
00000000000000a9: retn
00000000000000aa: hint_nop [eax+0+eax]
00000000000000b0: cmp [0x0000000000304159], 0x00
00000000000000b7: jnz +118 ; 000000000000012f
00000000000000b9: push ebp
00000000000000ba: mov rax, [0x0000000000304157]
00000000000000c1: mov rbp, rsp
00000000000000c4: push esp
00000000000000c6: push ebx
00000000000000c7: mov ebx, 0x00703ff0
00000000000000cc: mov esp, 0x00703fe8
00000000000000d2: sub rbx, 0x00703fe8
00000000000000d9: sar rbx, 0x03
00000000000000dd: sub rbx, 0x01
00000000000000e1: cmp rax, rbx
00000000000000e4: jnb +37 ; 000000000000010b
00000000000000e6: db 0x2e
hint_nop [eax+0+eax]
00000000000000f0: add rax, 0x01
00000000000000f4: mov [0x000000000030411d], rax
00000000000000fb: call [r12+r8*2]
00000000000000ff: mov rax, [0x0000000000304112]
0000000000000106: cmp rbx, rax
0000000000000109: jnbe -27 ; 00000000000000f0
000000000000010b: call +4294967072 ; 0000000100000030
0000000000000110: mov eax, 0x00000000
0000000000000115: test rax, rax
0000000000000118: jz +10 ; 0000000000000124
000000000000011a: mov edi, 0x00503cf4
000000000000011f: call +4290772396 ; 00000000ffbffed0
0000000000000124: pop ebx
0000000000000125: pop esp
0000000000000127: pop ebp
0000000000000128: mov [0x00000000003040e1], 0x01
000000000000012f: retn
0000000000000131: hint_nop [eax+0+eax]
0000000000000136: db 0x2e
hint_nop [eax+0+eax]
0000000000000140: push ebp
0000000000000141: mov eax, 0x00000000
0000000000000146: test rax, rax
0000000000000149: mov rbp, rsp
000000000000014c: jz +15 ; 000000000000015d
000000000000014e: mov esi, 0x00704360
0000000000000153: mov edi, 0x00503cf4
0000000000000158: call +4290772339 ; 00000000ffbffed0
000000000000015d: mov edi, 0x00703ff8
0000000000000162: cmp [rdi], 0x00
0000000000000166: jnz +8 ; 0000000000000170
0000000000000168: pop ebp
0000000000000169: jmp +4294967042 ; 0000000100000070
000000000000016e: nop
0000000000000170: mov eax, 0x00000000
0000000000000175: test rax, rax
0000000000000178: jz -18 ; 0000000000000168
000000000000017a: call rax
000000000000017c: jmp -22 ; 0000000000000168
000000000000017e: nop
0000000000000180: cmp rdi, 0xfffff000
0000000000000187: jnbe +7 ; 0000000000000190
0000000000000189: mov rax, rdi
000000000000018c: retn
000000000000018d: hint_nop [eax]
0000000000000190: push ebx
0000000000000191: mov rbx, rdi
0000000000000194: call +767096 ; 00000000000bb611
0000000000000199: mov edi, ebx
000000000000019b: neg edi
000000000000019d: mov [eax], edi
000000000000019f: mov rax, 0xffffffff
00000000000001a6: pop ebx
00000000000001a7: retn
00000000000001a8: hint_nop [eax+0+eax]
00000000000001b0: test rsi, rsi
00000000000001b3: jz +17 ; 00000000000001c6
00000000000001b5: xor edx, edx
00000000000001b7: mov rax, 0xffffffff
00000000000001be: div rsi
00000000000001c1: cmp rax, rdi
00000000000001c4: jb +10 ; 00000000000001d0
00000000000001c6: imul rdi, rsi
00000000000001ca: jmp +4225 ; 0000000000001250
00000000000001cf: nop
00000000000001d0: sub rsp, 0x08
00000000000001d4: call +767032 ; 00000000000bb611
00000000000001d9: mov [eax], 0x0000000c
00000000000001df: xor eax, eax
00000000000001e1: add rsp, 0x08
00000000000001e5: retn
00000000000001e6: db 0x2e
hint_nop [eax+0+eax]
00000000000001f0: push edi
00000000000001f2: push esi
00000000000001f4: push ebp
00000000000001f6: push esp
00000000000001f8: push ebp
00000000000001f9: push ebx
00000000000001fa: sub rsp, 0x18
00000000000001fe: mov [rsp+8], rdi
0000000000000203: hint_nop [eax+0+eax]
0000000000000208: mov rax, [rsp+8]
000000000000020d: mov rbx, [rax+8]
0000000000000211: test bl, 0x01
0000000000000214: jnz +258 ; 000000000000031c
000000000000021a: mov rax, rbx
000000000000021d: shr rax, 0x05
0000000000000221: sub rax, 0x01
0000000000000225: cmp rax, 0x20
0000000000000229: jnbe +177 ; 00000000000002e0
000000000000022f: lea rbp, [rip-530363328]
0000000000000236: mov rsi, rsp
0000000000000239: shl rbp, 0x03
000000000000023d: lea rax, [rip-183137528]
0000000000000244: push ebp
0000000000000245: xor [eax], al
0000000000000247: lea r15, [rip+7357504]
000000000000024e: test edx, edx
0000000000000250: jnz +218 ; 0000000000000330
0000000000000256: lea r8, [rip+1015236708]
000000000000025d: db 0xc5
000000000000025e: push zvq
000000000000025f: jo +0 ; 0000000000000262
0000000000000262: add [edi], cl
0000000000000264: test [edi+1], esi
0000000000000267: add [eax], al
0000000000000269: mov rax, rbx
000000000000026c: lea r10, [rip-981383068]
0000000000000273: jo +0 ; 0000000000000277
0000000000000277: lea rdx, [rip+1883521237]
000000000000027e: add [eax-119], cl
0000000000000281: push 0x18
0000000000000283: mov [rdx+16], rbp
0000000000000287: cmp rbx, rax
000000000000028a: jz +336 ; 00000000000003e0
0000000000000290: mov edx, [edi]
0000000000000293: test edx, edx
0000000000000295: jz +121 ; 0000000000000310
0000000000000297: xor eax, eax
0000000000000299: mov [edi], eax
000000000000029c: or [esp], 0x00
00000000000002a1: mov eax, [edi+4]
00000000000002a5: test eax, eax
00000000000002a7: jz +4294967131 ; 0000000100000208
00000000000002ad: mov ecx, 0x000000ca
00000000000002b3: mov edx, 0x00000001
00000000000002b8: mov esi, 0x00000081
00000000000002bd: mov r8, r9
00000000000002c0: mov r15, r15
00000000000002c3: syscall
00000000000002c5: cmp rax, 0xda
00000000000002c9: jnz +4294967097 ; 0000000100000208
00000000000002cf: mov r8, r9
00000000000002d2: mov rsi, rdx
00000000000002d5: syscall
00000000000002d7: jmp +4294967084 ; 0000000100000208
00000000000002dc: hint_nop [eax+0]
00000000000002e0: db 0x3d
00000000000002e2: db 0xff
00000000000002e3: add [eax], eax
00000000000002e5: add [edi], cl
00000000000002e7: xchg esp, [eax-1052246016+eax]
00000000000002ee: call +3054453763 ; 00000000b60f46f6
00000000000002f3: mov al, 0x7c
00000000000002f5: db 0x95
00000000000002f6: add [ebx-115], cl
00000000000002fa: db 0x2c
00000000000002fb: jbe +77 ; 000000000000034a
00000000000002fd: movsxd gdqp, ed
00000000000002fe: out 0x48, al
0000000000000300: shl ebp, 0x03
0000000000000303: lea rax, [rip-13244152]
000000000000030a: db 0xff
000000000000030b: db 0xff
000000000000030c: hint_nop [eax+0]
0000000000000310: mov rbx, rax
0000000000000313: test bl, 0x01
0000000000000316: jz +4294967038 ; 000000010000021a
000000000000031c: add rsp, 0x18
0000000000000320: xor eax, eax
0000000000000322: pop ebx
0000000000000323: pop ebp
0000000000000324: pop esp
0000000000000326: pop ebp
0000000000000328: pop esi
000000000000032a: pop edi
000000000000032c: retn
000000000000032d: hint_nop [eax]
0000000000000330: mov edx, 0x00000001
0000000000000335: xchg edx, [eax+7357504]
000000000000033b: test edx, edx
000000000000033d: lea rbp, [rip+254178308]
0000000000000344: db 0x1f
0000000000000345: add [eax], al
0000000000000348: mov ecx, 0x00000001
000000000000034d: mov edx, 0x00000001
0000000000000352: mov r14, r13
0000000000000355: mov r15, r15
0000000000000358: call +843448 ; 00000000000ce215
000000000000035d: mov ecx, 0x00000001
0000000000000362: xchg ecx, [edi]
0000000000000365: test ecx, ecx
0000000000000367: jnz -33 ; 0000000000000348
0000000000000369: lea r8, [rip+1015236708]
0000000000000370: db 0xc5
0000000000000371: push zvq
0000000000000372: jo +0 ; 0000000000000375
0000000000000375: add [edi], cl
0000000000000377: test [ecx], bl
0000000000000379: add [eax], eax
000000000000037b: add [eax-117], cl
000000000000037e: db 0x24
0000000000000380: or [eax-117], cl
0000000000000383: or cl, ch
0000000000000386: std
0000000000000387: db 0xfe
0000000000000388: db 0xff
0000000000000389: jmp [rsi+15]
000000000000038c: db 0x1f
000000000000038d: add [eax], al
0000000000000390: db 0x3d
0000000000000392: add [al+al], bl
0000000000000395: add [edi+40], dh
0000000000000398: shr rax, 0x07
000000000000039c: movzx esi, [eax+5084540]
00000000000003a4: add esi, 0x10
00000000000003a8: movsxd gdqp, ed
00000000000003aa: out 0x4b, al
00000000000003ac: lea ebp, [ebp-440317852]
00000000000003b2: add ecx, [eax-115]
00000000000003b5: or cl, ch
00000000000003b8: test esi, edi
00000000000003ba: db 0xff
00000000000003bb: db 0xff
00000000000003bc: hint_nop [eax+0]
00000000000003c0: mov eax, 0x000005f0
00000000000003c5: mov ebp, 0x000005e8
00000000000003ca: mov esi, 0x0000003f
00000000000003d0: mov esp, 0x0000003f
00000000000003d6: jmp +4294966886 ; 0000000100000241
00000000000003db: hint_nop [eax+0+eax]
00000000000003e0: mov rdi, [rsp+8]
00000000000003e5: mov rax, [rdi+24]
00000000000003e9: mov rdx, [rdi+16]
00000000000003ed: cmp rax, rdx
00000000000003f0: jz +120 ; 000000000000046a
00000000000003f2: mov rsi, [rsp+8]
00000000000003f7: mov [rax+16], rdx
00000000000003fb: mov rdx, [rsi+16]
00000000000003ff: mov [rdx+24], rax
0000000000000403: mov rax, rbx
0000000000000406: and rbx, 0xfe
000000000000040a: or rax, 0x01
000000000000040e: mov [rsi+8], rax
0000000000000412: mov eax, [edi]
0000000000000415: or [rsi+rbx], 0x01
000000000000041a: test eax, eax
000000000000041c: jz +56 ; 0000000000000456
000000000000041e: xor eax, eax
0000000000000420: mov [edi], eax
0000000000000423: or [esp], 0x00
0000000000000428: mov eax, [edi+4]
000000000000042c: test eax, eax
000000000000042e: jz +38 ; 0000000000000456
0000000000000430: mov ecx, 0x000000ca
0000000000000436: mov edx, 0x00000001
000000000000043b: mov esi, 0x00000081
0000000000000440: mov r8, r9
0000000000000443: mov r15, r15
0000000000000446: syscall
0000000000000448: cmp rax, 0xda
000000000000044c: jnz +8 ; 0000000000000456
000000000000044e: mov r8, r9
0000000000000451: mov rsi, rdx
0000000000000454: syscall
0000000000000456: add rsp, 0x18
000000000000045a: mov eax, 0x00000001
000000000000045f: pop ebx
0000000000000460: pop ebp
0000000000000461: pop esp
0000000000000463: pop ebp
0000000000000465: pop esi
0000000000000467: pop edi
0000000000000469: retn
000000000000046a: mov ecx, esi
000000000000046d: mov rax, 0xfffffffe
0000000000000474: rol rax, cl
0000000000000477: and [0x0000000000303e91], rax
000000000000047f: mov rdi, [rsp+8]
0000000000000484: mov rax, [rdi+24]
0000000000000488: mov rdx, [rdi+16]
000000000000048c: mov rbx, [rdi+8]
0000000000000490: jmp +4294967133 ; 00000001000003f2
0000000000000495: mov rax, [rsp+8]
000000000000049a: mov rax, [rax+8]
000000000000049e: jmp +4294966729 ; 000000010000026c
00000000000004a3: db 0x2e
hint_nop [eax+0+eax]
00000000000004ad: hint_nop [eax]
00000000000004b0: push edi
00000000000004b2: push esi
00000000000004b4: push ebp
00000000000004b6: push esp
00000000000004b8: push ebp
00000000000004b9: push ebx
00000000000004ba: sub rsp, 0x18
00000000000004be: mov [rsp+8], rdi
00000000000004c3: hint_nop [eax+0+eax]
00000000000004c8: mov rax, [rsp+8]
00000000000004cd: mov rbx, [rax]
00000000000004d0: test bl, 0x01
00000000000004d3: jnz +259 ; 00000000000005dc
00000000000004d9: mov rax, rbx
00000000000004dc: shr rax, 0x05
00000000000004e0: sub rax, 0x01
00000000000004e4: cmp rax, 0x20
00000000000004e8: jnbe +178 ; 00000000000005a0
00000000000004ee: lea rbp, [rip-530363328]
00000000000004f5: mov rsi, rsp
00000000000004f8: shl rbp, 0x03
00000000000004fc: lea rax, [rip+907381512]
0000000000000503: push ebx
0000000000000504: xor [eax], al
0000000000000506: lea r15, [rip+7357504]
000000000000050d: test edx, edx
000000000000050f: jnz +219 ; 00000000000005f0
0000000000000515: lea r8, [rip+1015236708]
000000000000051c: db 0xc5
000000000000051d: push zvq
000000000000051e: jo +0 ; 0000000000000521
0000000000000521: add [edi], cl
0000000000000523: test [eax+1], edi
0000000000000526: add [eax], al
0000000000000528: mov rax, rbx
000000000000052b: lea r10, [rip-981383068]
0000000000000532: jo +0 ; 0000000000000536
0000000000000536: lea rdx, [rip+1883521237]
000000000000053d: add [eax-119], cl
0000000000000540: push 0x18
0000000000000542: mov [rdx+16], rbp
0000000000000546: cmp rbx, rax
0000000000000549: jz +337 ; 00000000000006a0
000000000000054f: mov edx, [edi]
0000000000000552: test edx, edx
0000000000000554: jz +122 ; 00000000000005d0
0000000000000556: xor eax, eax
0000000000000558: mov [edi], eax
000000000000055b: or [esp], 0x00
0000000000000560: mov eax, [edi+4]
0000000000000564: test eax, eax
0000000000000566: jz +4294967132 ; 00000001000004c8
000000000000056c: mov ecx, 0x000000ca
0000000000000572: mov edx, 0x00000001
0000000000000577: mov esi, 0x00000081
000000000000057c: mov r8, r9
000000000000057f: mov r15, r15
0000000000000582: syscall
0000000000000584: cmp rax, 0xda
0000000000000588: jnz +4294967098 ; 00000001000004c8
000000000000058e: mov r8, r9
0000000000000591: mov rsi, rdx
0000000000000594: syscall
0000000000000596: jmp +4294967085 ; 00000001000004c8
000000000000059b: hint_nop [eax+0+eax]
00000000000005a0: db 0x3d
00000000000005a2: db 0xff
00000000000005a3: add [eax], eax
00000000000005a5: add [edi], cl
00000000000005a7: xchg esp, [eax-1052246016+eax]
00000000000005ae: call +3054453763 ; 00000000b60f49b6
00000000000005b3: mov al, 0x7c
00000000000005b5: db 0x95
00000000000005b6: add [ebx-115], cl
00000000000005ba: db 0x2c
00000000000005bb: jbe +77 ; 000000000000060a
00000000000005bd: movsxd gdqp, ed
00000000000005be: out 0x48, al
00000000000005c0: shl ebp, 0x03
00000000000005c3: lea rax, [rip-13309688]
00000000000005ca: db 0xff
00000000000005cb: db 0xff
00000000000005cc: hint_nop [eax+0]
00000000000005d0: mov rbx, rax
00000000000005d3: test bl, 0x01
00000000000005d6: jz +4294967037 ; 00000001000004d9
00000000000005dc: add rsp, 0x18
00000000000005e0: xor eax, eax
00000000000005e2: pop ebx
00000000000005e3: pop ebp
00000000000005e4: pop esp
00000000000005e6: pop ebp
00000000000005e8: pop esi
00000000000005ea: pop edi
00000000000005ec: retn
00000000000005ed: hint_nop [eax]
00000000000005f0: mov edx, 0x00000001
00000000000005f5: xchg edx, [eax+7357504]
00000000000005fb: test edx, edx
00000000000005fd: lea rbp, [rip+254178308]
0000000000000604: db 0x1f
0000000000000605: add [eax], al
0000000000000608: mov ecx, 0x00000001
000000000000060d: mov edx, 0x00000001
0000000000000612: mov r14, r13
0000000000000615: mov r15, r15
0000000000000618: call +842744 ; 00000000000ce215
000000000000061d: mov ecx, 0x00000001
0000000000000622: xchg ecx, [edi]
0000000000000625: test ecx, ecx
0000000000000627: jnz -33 ; 0000000000000608
0000000000000629: lea r8, [rip+1015236708]
0000000000000630: db 0xc5
0000000000000631: push zvq
0000000000000632: jo +0 ; 0000000000000635
0000000000000635: add [edi], cl
0000000000000637: test [esi], dl
0000000000000639: add [eax], eax
000000000000063b: add [eax-117], cl
000000000000063e: db 0x24
0000000000000640: or [eax-117], cl
0000000000000643: add cl, ch
0000000000000645: std
0000000000000646: db 0xfe
0000000000000647: db 0xff
0000000000000648: db 0xff
0000000000000649: hint_nop [eax+0]
0000000000000650: db 0x3d
0000000000000652: add [al+al], bl
0000000000000655: add [edi+40], dh
0000000000000658: shr rax, 0x07
000000000000065c: movzx esi, [eax+5084540]
0000000000000664: add esi, 0x10
0000000000000668: movsxd gdqp, ed
000000000000066a: out 0x4b, al
000000000000066c: lea ebp, [ebp-440317852]
0000000000000672: add ecx, [eax-115]
0000000000000675: or cl, ch
0000000000000678: test dh, bh
000000000000067a: db 0xff
000000000000067b: db 0xff
000000000000067c: hint_nop [eax+0]
0000000000000680: mov ebp, 0x000005e8
0000000000000685: mov eax, 0x000005f0
000000000000068a: mov esi, 0x0000003f
0000000000000690: mov esp, 0x0000003f
0000000000000696: jmp +4294966885 ; 0000000100000500
000000000000069b: hint_nop [eax+0+eax]
00000000000006a0: mov rsi, [rsp+8]
00000000000006a5: and rbx, 0xfe
00000000000006a9: sub rsi, rbx
00000000000006ac: mov rax, [rsi+24]
00000000000006b0: mov rdx, [rsi+16]
00000000000006b4: cmp rax, rdx
00000000000006b7: jz +119 ; 0000000000000730
00000000000006b9: mov [rax+16], rdx
00000000000006bd: mov rdx, [rsi+16]
00000000000006c1: mov [rdx+24], rax
00000000000006c5: mov rax, [rsi+8]
00000000000006c9: mov rdx, rax
00000000000006cc: and rax, 0xfe
00000000000006d0: or rdx, 0x01
00000000000006d4: mov [rsi+8], rdx
00000000000006d8: or [rsi+rax], 0x01
00000000000006dd: mov eax, [edi]
00000000000006e0: test eax, eax
00000000000006e2: jz +56 ; 000000000000071c
00000000000006e4: xor eax, eax
00000000000006e6: mov [edi], eax
00000000000006e9: or [esp], 0x00
00000000000006ee: mov eax, [edi+4]
00000000000006f2: test eax, eax
00000000000006f4: jz +38 ; 000000000000071c
00000000000006f6: mov ecx, 0x000000ca
00000000000006fc: mov edx, 0x00000001
0000000000000701: mov esi, 0x00000081
0000000000000706: mov r8, r9
0000000000000709: mov r15, r15
000000000000070c: syscall
000000000000070e: cmp rax, 0xda
0000000000000712: jnz +8 ; 000000000000071c
0000000000000714: mov r8, r9
0000000000000717: mov rsi, rdx
000000000000071a: syscall
000000000000071c: add rsp, 0x18
0000000000000720: mov eax, 0x00000001
0000000000000725: pop ebx
0000000000000726: pop ebp
0000000000000727: pop esp
0000000000000729: pop ebp
000000000000072b: pop esi
000000000000072d: pop edi
000000000000072f: retn
0000000000000730: mov ecx, esi
0000000000000733: mov rax, 0xfffffffe
000000000000073a: rol rax, cl
000000000000073d: and [0x0000000000303bcb], rax
0000000000000745: mov rax, [rsi+24]
0000000000000749: mov rdx, [rsi+16]
000000000000074d: jmp +4294967143 ; 00000001000006b9
0000000000000752: mov rax, [rsp+8]
0000000000000757: mov rax, [rax]
000000000000075a: jmp +4294966732 ; 000000010000052b
000000000000075f: nop
0000000000000760: test rdi, rdi
0000000000000763: jz +981 ; 0000000000000b3e
0000000000000769: push edi
000000000000076b: push esi
000000000000076d: push ebp
000000000000076f: push esp
0000000000000771: push ebp
0000000000000772: push ebx
0000000000000773: lea rbp, [rip-326940432]
000000000000077a: sub [eax-117], cl
000000000000077d: jnbe -8 ; 0000000000000777
000000000000077f: test dh, 0x01
0000000000000783: jz +503 ; 0000000000000980
0000000000000789: mov rax, rsi
000000000000078c: and rax, 0xfe
0000000000000790: lea r13, [rip-1991770107]
0000000000000797: db 0x24
0000000000000799: or [ecx+59], cl
000000000000079c: jnz +0 ; 000000000000079e
000000000000079e: jz +1 ; 00000000000007a1
00000000000007a0: hlt
00000000000007a1: mov r14, [r12+8]
00000000000007a6: mov [esp+24], 0x00000000
00000000000007ae: mov esp, 0x00000001
00000000000007b4: hint_nop [eax+0]
00000000000007b8: mov rax, [rbp+0]
00000000000007bc: and r8, [rbp+8]
00000000000007c0: db 0xa8
00000000000007c1: add [edi], ecx
00000000000007c3: test [eax], bl
00000000000007c5: add [eax], eax
00000000000007c7: add [cl-16+cl], cl
00000000000007cb: or rax, 0x01
00000000000007cf: mov [rbp+8], rax
00000000000007d3: mov [rbp+0], r8
00000000000007d7: mov r8, r14
00000000000007da: shr rax, 0x05
00000000000007de: sub rax, 0x01
00000000000007e2: cmp rax, 0x20
00000000000007e6: jnbe +452 ; 00000000000009b0
00000000000007ec: movsxd gdqp, ed
00000000000007ee: clc
00000000000007ef: lea rax, [rip+2089370688]
00000000000007f6: db 0x24
00000000000007f7: db 0x1c
00000000000007f8: shl rax, 0x03
00000000000007fc: mov [rsp+16], rax
0000000000000801: add rax, 0x08
0000000000000805: mov edx, [0x0000000000305031]
000000000000080b: lea rbx, [rip+7357504]
0000000000000812: test edx, edx
0000000000000814: jnz +806 ; 0000000000000b40
000000000000081a: lea r8, [rip+76367999]
0000000000000821: db 0xc5
0000000000000822: jo +0 ; 0000000000000826
0000000000000826: cmp [rax+16], 0x00
000000000000082b: jz +911 ; 0000000000000bc0
0000000000000831: mov eax, [0x0000000000305005]
0000000000000837: test eax, eax
0000000000000839: jnz +425 ; 00000000000009e8
000000000000083f: mov rax, [rbp+0]
0000000000000843: and r8, [rbp+8]
0000000000000847: db 0xa8
0000000000000848: add [edi], ecx
000000000000084a: test edi, esp
000000000000084c: add [eax], eax
000000000000084e: add [ebx+809550597], cl
0000000000000854: add [ebp+826766528], al
000000000000085a: ror [ecx+809547525], 0x00
0000000000000861: or [esp], 0x00
0000000000000866: mov eax, [0x00000000003040b0]
000000000000086c: test eax, eax
000000000000086e: jz +48 ; 00000000000008a0
0000000000000870: mov eax, 0x000000ca
0000000000000876: mov edi, 0x00704a48
000000000000087b: mov edx, 0x00000001
0000000000000880: mov esi, 0x00000081
0000000000000885: mov r8, r8
0000000000000888: syscall
000000000000088a: cmp rax, 0xda
000000000000088e: jnz +16 ; 00000000000008a0
0000000000000890: mov r8, r8
0000000000000893: mov rsi, rdx
0000000000000896: syscall
0000000000000898: hint_nop [eax+0+eax]
00000000000008a0: mov eax, [ebx]
00000000000008a2: test eax, eax
00000000000008a4: jz +58 ; 00000000000008e0
00000000000008a6: xor eax, eax
00000000000008a8: mov [ebx], eax
00000000000008aa: or [esp], 0x00
00000000000008af: mov eax, [ebx+4]
00000000000008b2: test eax, eax
00000000000008b4: jz +42 ; 00000000000008e0
00000000000008b6: mov eax, 0x000000ca
00000000000008bc: mov edx, 0x00000001
00000000000008c1: mov esi, 0x00000081
00000000000008c6: mov r8, r8
00000000000008c9: mov rdi, rbx
00000000000008cc: syscall
00000000000008ce: cmp rax, 0xda
00000000000008d2: jnz +12 ; 00000000000008e0
00000000000008d4: mov r8, r8
00000000000008d7: mov rsi, rdx
00000000000008da: syscall
00000000000008dc: hint_nop [eax+0]
00000000000008e0: mov rdi, rbp
00000000000008e3: call +4294966216 ; 00000001000004b0
00000000000008e8: test eax, eax
00000000000008ea: jz +58 ; 0000000000000926
00000000000008ec: mov rax, [rbp+0]
00000000000008f0: mov rcx, [rsp+8]
00000000000008f5: and rax, 0xfe
00000000000008f9: sub rbp, rax
00000000000008fc: mov rax, [rbp+8]
0000000000000900: and rax, 0xfe
0000000000000904: lea rdx, [rip-972994303]
000000000000090b: cmp rdx, 0x00028000
0000000000000912: jbe +18 ; 0000000000000926
0000000000000914: xor rdx, rax
0000000000000917: cmp rax, rdx
000000000000091a: mov eax, [esp+24]
000000000000091e: cmovb eax, esp
0000000000000922: mov [esp+24], eax
0000000000000926: mov r15, r13
0000000000000929: call +4294965442 ; 00000001000001f0
000000000000092e: test eax, eax
0000000000000930: jz +4294966914 ; 00000001000007b8
0000000000000936: mov r8, [rbp+8]
000000000000093a: mov rsi, [rsp+8]
000000000000093f: and rax, 0xfe
0000000000000943: lea rdx, [rip-972994298]
000000000000094a: cmp rdx, 0x00028000
0000000000000951: jbe +18 ; 0000000000000965
0000000000000953: mov ecx, [esp+24]
0000000000000957: xor rdx, rax
000000000000095a: cmp rax, rdx
000000000000095d: cmovb ecx, esp
0000000000000961: mov [esp+24], ecx
0000000000000965: add r13, r8
0000000000000968: mov rax, [rbp+0]
000000000000096c: and r8, [rbp+8]
0000000000000970: db 0xa8
0000000000000971: add [edi], ecx
0000000000000973: test [eax-2], edx
0000000000000976: db 0xff
0000000000000977: db 0xff
0000000000000978: jmp +4294967139 ; 00000001000008e0
000000000000097d: hint_nop [eax]
0000000000000980: mov rax, [rdi-16]
0000000000000984: and rsi, 0xfe
0000000000000988: mov rdi, rbp
000000000000098b: sub rdi, rax
000000000000098e: add rsi, rax
0000000000000991: db 0xa8
0000000000000992: add [ecx-12+eax], esi
0000000000000996: add rsp, 0x28
000000000000099a: pop ebx
000000000000099b: pop ebp
000000000000099c: pop esp
000000000000099e: pop ebp
00000000000009a0: pop esi
00000000000009a2: pop edi
00000000000009a4: jmp +775840 ; 00000000000be049
00000000000009a9: hint_nop [eax+0]
00000000000009b0: db 0x3d
00000000000009b2: db 0xff
00000000000009b3: add [eax], eax
00000000000009b5: add [edi], cl
00000000000009b7: xchg ecx, esp
00000000000009b9: add [eax], eax
00000000000009bb: add [eax-63], cl
00000000000009be: call +2562068227 ; 0000000098b618c6
00000000000009c3: jl -107 ; 000000000000095a
00000000000009c5: add [eax-115], cl
00000000000009c9: db 0x04
00000000000009ca: pop ebx
00000000000009cb: mov [esp+28], ebx
00000000000009cf: movsxd gdqp, ed
00000000000009d1: db 0xfb
00000000000009d2: shl rax, 0x03
00000000000009d6: mov [rsp+16], rax
00000000000009db: add rax, 0x08
00000000000009df: jmp +4294966817 ; 0000000100000805
00000000000009e4: hint_nop [eax+0]
00000000000009e8: mov eax, esp
00000000000009eb: xchg eax, [0x0000000000303f27]
00000000000009f1: test eax, eax
00000000000009f3: jz +4294966854 ; 000000010000083f
00000000000009f9: hint_nop [eax+0]
0000000000000a00: mov ecx, 0x00000001
0000000000000a05: mov edx, 0x00000001
0000000000000a0a: mov esi, 0x00704a4c
0000000000000a0f: mov edi, 0x00704a48
0000000000000a14: call +841724 ; 00000000000ce215
0000000000000a19: mov eax, esp
0000000000000a1c: xchg eax, [0x0000000000303ef6]
0000000000000a22: test eax, eax
0000000000000a24: jnz -38 ; 0000000000000a00
0000000000000a26: mov rax, [rbp+0]
0000000000000a2a: and r8, [rbp+8]
0000000000000a2e: db 0xa8
0000000000000a2f: add [edi], ecx
0000000000000a31: test [ecx], bl
0000000000000a33: db 0xfe
0000000000000a34: db 0xff
0000000000000a35: db 0xff
0000000000000a36: mov rax, [0x00000000003038d3]
0000000000000a3d: mov esi, [esp+28]
0000000000000a41: bt rax, rsi
0000000000000a45: jb +18 ; 0000000000000a59
0000000000000a47: mov ecx, esi
0000000000000a49: mov eax, 0x00000001
0000000000000a4e: shl rax, cl
0000000000000a51: or [0x00000000003038b7], rax
0000000000000a59: mov eax, [0x0000000000303eb9]
0000000000000a5f: mov [rbp+8], r14
0000000000000a63: mov [rbp+0], rsi
0000000000000a67: test eax, eax
0000000000000a69: jz +69 ; 0000000000000ab0
0000000000000a6b: xor eax, eax
0000000000000a6d: mov [0x0000000000303ea5], eax
0000000000000a73: or [esp], 0x00
0000000000000a78: mov eax, [0x0000000000303e9e]
0000000000000a7e: test eax, eax
0000000000000a80: jz +46 ; 0000000000000ab0
0000000000000a82: mov eax, 0x000000ca
0000000000000a88: mov edi, 0x00704a48
0000000000000a8d: mov edx, 0x00000001
0000000000000a92: mov esi, 0x00000081
0000000000000a97: mov r8, r8
0000000000000a9a: syscall
0000000000000a9c: cmp rax, 0xda
0000000000000aa0: jnz +14 ; 0000000000000ab0
0000000000000aa2: mov r8, r8
0000000000000aa5: mov rsi, rdx
0000000000000aa8: syscall
0000000000000aaa: hint_nop [eax+0+eax]
0000000000000ab0: mov rcx, [rsp+16]
0000000000000ab5: mov rax, rcx
0000000000000ab8: db 0x05
0000000000000aba: jo +0 ; 0000000000000abe
0000000000000abe: mov [rbp+16], rax
0000000000000ac2: lea r8, [rip+76236927]
0000000000000ac9: db 0xc5
0000000000000aca: pop zvq
0000000000000acb: jo +0 ; 0000000000000ace
0000000000000ace: mov [rbp+24], rax
0000000000000ad2: mov [rcx+7357528], rbp
0000000000000ad9: mov rax, [rbp+24]
0000000000000add: mov [rax+16], rbp
0000000000000ae1: mov eax, [esp+24]
0000000000000ae5: test eax, eax
0000000000000ae7: jnz +276 ; 0000000000000c01
0000000000000aed: mov eax, [ebx]
0000000000000aef: test eax, eax
0000000000000af1: jz +61 ; 0000000000000b30
0000000000000af3: xor eax, eax
0000000000000af5: mov [ebx], eax
0000000000000af7: or [esp], 0x00
0000000000000afc: mov eax, [ebx+4]
0000000000000aff: test eax, eax
0000000000000b01: jz +45 ; 0000000000000b30
0000000000000b03: mov eax, 0x000000ca
0000000000000b09: mov edx, 0x00000001
0000000000000b0e: mov esi, 0x00000081
0000000000000b13: mov r8, r8
0000000000000b16: mov rdi, rbx
0000000000000b19: syscall
0000000000000b1b: cmp rax, 0xda
0000000000000b1f: jnz +15 ; 0000000000000b30
0000000000000b21: mov r8, r8
0000000000000b24: mov rsi, rdx
0000000000000b27: syscall
0000000000000b29: hint_nop [eax+0]
0000000000000b30: add rsp, 0x28
0000000000000b34: pop ebx
0000000000000b35: pop ebp
0000000000000b36: pop esp
0000000000000b38: pop ebp
0000000000000b3a: pop esi
0000000000000b3c: pop edi
0000000000000b3e: retn
0000000000000b40: mov edx, esp
0000000000000b43: xchg edx, [eax+7357504]
0000000000000b49: test edx, edx
0000000000000b4b: jz +4294966473 ; 000000010000081a
0000000000000b51: lea rax, [rip+76105732]
0000000000000b58: db 0x24
0000000000000b59: hint_nop [eax+0]
0000000000000b60: mov rsi, [rsp]
0000000000000b64: mov ecx, 0x00000001
0000000000000b69: mov edx, 0x00000001
0000000000000b6e: mov rdi, rbx
0000000000000b71: call +841375 ; 00000000000ce215
0000000000000b76: mov eax, esp
0000000000000b79: xchg eax, [ebx]
0000000000000b7b: test eax, eax
0000000000000b7d: jnz -31 ; 0000000000000b60
0000000000000b7f: jmp +4294966422 ; 000000010000081a
0000000000000b84: hint_nop [eax+0]
0000000000000b88: db 0x3d
0000000000000b8a: add [al+al], bl
0000000000000b8d: add [edi+80], dh
0000000000000b90: shr rax, 0x07
0000000000000b94: movzx eax, [eax+5084540]
0000000000000b9b: add eax, 0x10
0000000000000b9e: movsxd gdqp, ed
0000000000000ba0: clc
0000000000000ba1: mov [esp+28], eax
0000000000000ba5: lea r8, [rip-524203905]
0000000000000bac: add ecx, [eax-119]
0000000000000baf: db 0x24
0000000000000bb1: adc [eax-125], cl
0000000000000bb4: ror [eax], 0xe9
0000000000000bb7: cld
0000000000000bb9: db 0xff
0000000000000bba: db 0xff
0000000000000bbb: hint_nop [eax+0+eax]
0000000000000bc0: mov rsi, [rsp+16]
0000000000000bc5: lea rdx, [rip+7357504]
0000000000000bcc: mov [rax+24], rdx
0000000000000bd0: mov [rax+16], rdx
0000000000000bd4: jmp +4294966360 ; 0000000100000831
0000000000000bd9: hint_nop [eax+0]
0000000000000be0: mov eax, 0x000005f0
0000000000000be5: mov [rsp+16], 0x000005e8
0000000000000bee: mov [esp+28], 0x0000003f
0000000000000bf6: mov edi, 0x0000003f
0000000000000bfc: jmp +4294966276 ; 0000000100000805
0000000000000c01: lea rdi, [rip+4127]
0000000000000c08: lea r14, [rip+309984]
0000000000000c0f: add [eax], al
0000000000000c11: and rdi, 0xfffff000
0000000000000c18: and rsi, 0xfffff000
0000000000000c1f: sub rsi, rdi
0000000000000c22: call +774812 ; 00000000000bdec3
0000000000000c27: jmp +4294966977 ; 0000000100000aed
0000000000000c2c: hint_nop [eax+0]
0000000000000c30: push edi
0000000000000c32: lea rdx, [rip+1096172031]
0000000000000c39: push ebp
0000000000000c3a: push esp
0000000000000c3c: mov eax, 0xffffefdf
0000000000000c42: db 0xff
0000000000000c43: db 0xff
0000000000000c44: db 0xff
0000000000000c45: jnle +85 ; 0000000000000c9c
0000000000000c47: push ebx
0000000000000c48: sub rsp, 0x38
0000000000000c4c: cmp rdx, rax
0000000000000c4f: jbe +523 ; 0000000000000e60
0000000000000c55: test rdi, rdi
0000000000000c58: jnz +1345 ; 000000000000119f
0000000000000c5e: mov [rsp+8], 0xffffffff
0000000000000c67: mov [esp+28], 0x00000000
0000000000000c6f: mov [rsp+16], 0x00000020
0000000000000c78: mov ebp, 0x00000001
0000000000000c7e: nop
0000000000000c80: mov rbx, [0x0000000000303689]
0000000000000c87: and rbx, [rsp+8]
0000000000000c8c: jz +190 ; 0000000000000d50
0000000000000c92: bsf rbx, rbx
0000000000000c96: mov [esp+24], ebx
0000000000000c9a: movsxd gdqp, ed
0000000000000c9c: fcmovne st, est
0000000000000c9e: db 0x05
0000000000000c9f: cwd
0000000000000ca0: xor [eax], al
0000000000000ca3: lea rbp, [rip-440317861]
0000000000000caa: add eax, [ebp+1703759040]
0000000000000cb0: or [ebp-115], cl
0000000000000cb3: mov esp, 0x70444024
0000000000000cb8: add [edi], cl
0000000000000cba: test [ecx], esp
0000000000000cbc: add al, [eax]
0000000000000cbe: add [eax-115], cl
0000000000000cc1: db 0x04
0000000000000cc2: pop ebx
0000000000000cc3: lea rax, [rip+1883521221]
0000000000000cca: add [eax-117], cl
0000000000000ccd: pop zvq
0000000000000cce: adc [eax-123], cl
0000000000000cd1: fcmovne st, est
0000000000000cd3: test [eax+2], dl
0000000000000cd6: add [eax], al
0000000000000cd8: add rbp, 0x00704440
0000000000000cdf: cmp rbx, rbp
0000000000000ce2: jnz +600 ; 0000000000000f40
0000000000000ce8: mov eax, [esp+7357504]
0000000000000cf0: test eax, eax
0000000000000cf2: jz -116 ; 0000000000000c80
0000000000000cf4: xor eax, eax
0000000000000cf6: mov [esp+7357504], eax
0000000000000cfe: or [esp], 0x00
0000000000000d03: mov eax, [edi+4]
0000000000000d07: test eax, eax
0000000000000d09: jz +4294967153 ; 0000000100000c80
0000000000000d0f: mov ecx, 0x000000ca
0000000000000d15: mov edx, 0x00000001
0000000000000d1a: mov esi, 0x00000081
0000000000000d1f: mov r8, r9
0000000000000d22: mov r15, r15
0000000000000d25: syscall
0000000000000d27: cmp rax, 0xda
0000000000000d2b: jnz +4294967119 ; 0000000100000c80
0000000000000d31: mov r8, r9
0000000000000d34: mov rsi, rdx
0000000000000d37: syscall
0000000000000d39: mov rbx, [0x00000000003035d0]
0000000000000d40: and rbx, [rsp+8]
0000000000000d45: jnz +4294967111 ; 0000000100000c92
0000000000000d4b: hint_nop [eax+0+eax]
0000000000000d50: mov rax, [rsp+16]
0000000000000d55: add rax, 0x20
0000000000000d59: mov [rsp+40], rax
0000000000000d5e: mov eax, [0x0000000000304ad8]
0000000000000d64: test eax, eax
0000000000000d66: jnz +955 ; 0000000000001127
0000000000000d6c: lea rdi, [rip+2062034980]
0000000000000d73: db 0x3d
0000000000000d74: add [eax], al
0000000000000d76: test rax, rax
0000000000000d79: mov rbx, rax
0000000000000d7c: jz +1114 ; 00000000000011dc
0000000000000d82: cmp rbx, [0x000000000030495f]
0000000000000d89: mov rax, [rsp+40]
0000000000000d8e: mov rbp, rbx
0000000000000d91: jz +21 ; 0000000000000da8
0000000000000d93: sub rax, 0x20
0000000000000d97: lea rbp, [rip+1137133600]
0000000000000d9e: adc [ecx], al
0000000000000da0: add [eax], al
0000000000000da2: add [eax-119], cl
0000000000000da5: db 0x24
0000000000000da7: sub [eax-115], cl
0000000000000daa: push esp
0000000000000dab: db 0x05
0000000000000dac: add [eax-125], cl
0000000000000daf: enter 0x4c01, 0x8d
0000000000000db3: mov edi, 0x00705820
0000000000000dba: mov [rdx-16], rax
0000000000000dbe: mov [rdx-8], 0x00000001
0000000000000dc6: mov [0x000000000030491b], rdx
0000000000000dcd: mov edx, [0x000000000030491d]
0000000000000dd3: mov [rbp-8], rax
0000000000000dd7: test edx, edx
0000000000000dd9: jz +61 ; 0000000000000e18
0000000000000ddb: xor eax, eax
0000000000000ddd: mov [0x000000000030490d], eax
0000000000000de3: or [esp], 0x00
0000000000000de8: mov eax, [0x0000000000304906]
0000000000000dee: test eax, eax
0000000000000df0: jz +38 ; 0000000000000e18
0000000000000df2: mov eax, 0x000000ca
0000000000000df8: mov edx, 0x00000001
0000000000000dfd: mov esi, 0x00000081
0000000000000e02: mov r8, r8
0000000000000e05: syscall
0000000000000e07: cmp rax, 0xda
0000000000000e0b: jnz +11 ; 0000000000000e18
0000000000000e0d: mov r8, r8
0000000000000e10: mov rsi, rdx
0000000000000e13: syscall
0000000000000e15: hint_nop [eax]
0000000000000e18: test rsp, rsp
0000000000000e1b: jz +948 ; 00000000000011d5
0000000000000e21: mov r15, r12
0000000000000e24: call +4294964871 ; 00000001000004b0
0000000000000e29: test eax, eax
0000000000000e2b: jz +730 ; 000000000000110b
0000000000000e31: mov rax, [rbp-16]
0000000000000e35: mov r11, r12
0000000000000e38: mov rdx, [rbp-8]
0000000000000e3c: and rax, 0xfe
0000000000000e40: sub rbx, rax
0000000000000e43: mov rax, [rbx+8]
0000000000000e47: and rax, 0xfe
0000000000000e4b: add rax, rdx
0000000000000e4e: and rdx, 0xfe
0000000000000e52: mov [rbx+8], rax
0000000000000e56: mov [r12+r10], r8
0000000000000e5a: jmp +468 ; 0000000000001033
0000000000000e5f: nop
0000000000000e60: add rdi, 0x2f
0000000000000e64: and rdi, 0xe0
0000000000000e68: cmp rdi, 0x00038000
0000000000000e6f: mov [rsp+16], rdi
0000000000000e74: jbe +582 ; 00000000000010c0
0000000000000e7a: mov rbp, rdi
0000000000000e7d: xor ecx, ecx
0000000000000e80: xor edi, edi
0000000000000e82: add rbp, 0x0000100f
0000000000000e89: mov eax, 0xffffffff
0000000000000e8f: mov ecx, 0x00000022
0000000000000e94: and rbp, 0xfffff000
0000000000000e9b: mov edx, 0x00000003
0000000000000ea0: mov rsi, rbp
0000000000000ea3: call +774217 ; 00000000000bdef1
0000000000000ea8: cmp rax, 0xff
0000000000000eac: jz +803 ; 00000000000011d5
0000000000000eb2: sub rbp, 0x10
0000000000000eb6: lea rbx, [rip+1086801952]
0000000000000ebd: adc [eax], dl
0000000000000ebf: add [eax], al
0000000000000ec1: add [eax-119], cl
0000000000000ec4: push 0xc4834818
0000000000000ec9: cmp [eax-119], cl
0000000000000ecc: fcomp essr
0000000000000ece: pop ebp
0000000000000ecf: pop esp
0000000000000ed1: pop ebp
0000000000000ed3: pop esi
0000000000000ed5: pop edi
0000000000000ed7: retn
0000000000000ed8: hint_nop [eax+0+eax]
0000000000000ee0: mov eax, ebp
0000000000000ee3: xchg eax, [esp+7357504]
0000000000000eeb: test eax, eax
0000000000000eed: jz +4294966732 ; 0000000100000cbf
0000000000000ef3: lea rsi, [rip+521102852]
0000000000000efa: test [eax], al
0000000000000efc: add [eax], al
0000000000000efe: add [eax], al
0000000000000f00: mov ecx, 0x00000001
0000000000000f05: mov edx, 0x00000001
0000000000000f0a: mov r14, r14
0000000000000f0d: mov r15, r15
0000000000000f10: call +840448 ; 00000000000ce215
0000000000000f15: mov ecx, ebp
0000000000000f18: xchg ecx, [edi]
0000000000000f1b: test ecx, ecx
0000000000000f1d: jnz -31 ; 0000000000000f00
0000000000000f1f: jmp +4294966683 ; 0000000100000cbf
0000000000000f24: hint_nop [eax+0]
0000000000000f28: add rbp, 0x00704440
0000000000000f2f: mov [rax+24], rbp
0000000000000f33: mov [rax+16], rbp
0000000000000f37: jmp +4294966700 ; 0000000100000ce8
0000000000000f3c: hint_nop [eax+0]
0000000000000f40: mov esi, [esp+24]
0000000000000f44: cmp esi, 0x27
0000000000000f47: jle +313 ; 0000000000001086
0000000000000f4d: mov eax, [esp+28]
0000000000000f51: add eax, 0x02
0000000000000f54: cmp esi, eax
0000000000000f56: jle +289 ; 000000000000107d
0000000000000f5c: mov rdx, [rbx+8]
0000000000000f60: and rdx, 0xfe
0000000000000f64: mov rsi, rdx
0000000000000f67: sub rsi, [rsp+16]
0000000000000f6c: mov rax, rsi
0000000000000f6f: shr rax, 0x05
0000000000000f73: sub rax, 0x01
0000000000000f77: cmp rax, 0x20
0000000000000f7b: jbe +261 ; 0000000000001086
0000000000000f81: db 0x3d
0000000000000f83: db 0xff
0000000000000f84: add [eax], eax
0000000000000f86: add [edi], cl
0000000000000f88: xchg al, [edx]
0000000000000f8a: add al, [eax]
0000000000000f8c: add [eax+61], cl
0000000000000f8f: add [al+al], bl
0000000000000f92: add [ecx+63], bh
0000000000000f98: jnbe +14 ; 0000000000000fa8
0000000000000f9a: shr rax, 0x07
0000000000000f9e: movzx ecx, [eax+5084540]
0000000000000fa5: add ecx, 0x10
0000000000000fa8: cmp [esp+24], ecx
0000000000000fac: jnz +212 ; 0000000000001086
0000000000000fb2: mov r10, [r12+16]
0000000000000fb7: mov rax, [rbx+24]
0000000000000fbb: mov rdi, [rbx+16]
0000000000000fbf: lea rcx, [rip+1099515923]
0000000000000fc6: sbb [eax-119], cl
0000000000000fc9: jns +16 ; 0000000000000fdb
0000000000000fcb: mov [rax+16], rcx
0000000000000fcf: mov rax, [rcx+16]
0000000000000fd3: mov [rax+24], rcx
0000000000000fd7: mov r8, r10
0000000000000fda: mov [rcx+8], rsi
0000000000000fde: or rax, 0x01
0000000000000fe2: mov [rcx], rax
0000000000000fe5: mov [rbx+rdx], rsi
0000000000000fe9: mov [rbx+8], rax
0000000000000fed: mov edx, [edi]
0000000000000ff0: test edx, edx
0000000000000ff2: jz +63 ; 0000000000001033
0000000000000ff4: xor eax, eax
0000000000000ff6: mov [edi], eax
0000000000000ff9: or [esp], 0x00
0000000000000ffe: mov eax, [edi+4]
// Export handler: Raw
// Export handler: x86-64 instructions
// committed:FORMAT:Section[00000000000d3e39h-00000000000d3e41h]
0000000000000000: push zvq
0000000000000001: call +4294099873 ; 00000000fff2c3a7
0000000000000006: pop zvq
0000000000000007: retn
// Export handler: Raw
// Export handler: x86-64 instructions
// committed:FORMAT:Section[00000000000d3e60h-0000000000103cf1h]
{ ... } // 191,642 KiB// Export handler: Raw
// committed:FORMAT:Section[0000000000103cf4h-0000000000103cf8h]
{ ... } // 4 byte// Export handler: Raw
// committed:FORMAT:Section[0000000000103fd8h-0000000000103fe8h]
{ ... } // 16 byte// Export handler: Raw
// committed:FORMAT:Section[0000000000103fe8h-0000000000103ff8h]
{ ... } // 16 byte// Export handler: Raw
// committed:FORMAT:Section[0000000000103ff8h-0000000000104000h]
{ ... } // 8 byte// Export handler: Raw
// committed:FORMAT:Section[0000000000104000h-000000000010433fh]
{ ... } // 831 byte// Export handler: Raw
// committed:FORMAT:Section[000000000010433fh-000000000010438ch]
{ ... } // 77 byte// Export handler: Raw
// committed:FORMAT:Section header table[0000000000104390h-0000000000104690h]
start = 0000000000104390h
end = 0000000000104690h
size = 768 // 768 byte
// Export handler: Raw
// committed:FORMAT:Elf64_Shdr[0000000000104390h-00000000001043d0h]
sh_name = 00000000h
sh_type = 00000000h // SHT_NULL
sh_flags = 0000000000000000h
.....................................................0.......... // SHF_TLS
......................................................0......... // SHF_GROUP
.......................................................0........ // SHF_OS_NONCONFORMING
........................................................0....... // SHF_LINK_ORDER
.........................................................0...... // SHF_INFO_LINK
..........................................................0..... // SHF_STRINGS
...........................................................0.... // SHF_MERGE
.............................................................0.. // SHF_EXECINSTR
..............................................................0. // SHF_ALLOC
...............................................................0 // SHF_WRITE
sh_addr = 0000000000000000h
sh_offset = 0000000000000000h
sh_size = 0 // 0 byte
sh_link = 00000000h
sh_info = 00000000h
sh_addralign = 0000000000000000h
sh_entsize = 0 // 0 byte
// Export handler: Raw
// committed:FORMAT:Elf64_Shdr[00000000001043d0h-0000000000104410h]
sh_name = 0000000bh
sh_type = 00000001h // SHT_PROGBITS
sh_flags = 0000000000000006h
.....................................................0.......... // SHF_TLS
......................................................0......... // SHF_GROUP
.......................................................0........ // SHF_OS_NONCONFORMING
........................................................0....... // SHF_LINK_ORDER
.........................................................0...... // SHF_INFO_LINK
..........................................................0..... // SHF_STRINGS
...........................................................0.... // SHF_MERGE
.............................................................1.. // SHF_EXECINSTR
..............................................................1. // SHF_ALLOC
...............................................................0 // SHF_WRITE
sh_addr = 0000000000400120h
sh_offset = 0000000000000120h
sh_size = 13 // 13 byte
sh_link = 00000000h
sh_info = 00000000h
sh_addralign = 0000000000000001h
sh_entsize = 0 // 0 byte
// Export handler: Raw
// committed:FORMAT:Elf64_Shdr[0000000000104410h-0000000000104450h]
sh_name = 00000011h
sh_type = 00000001h // SHT_PROGBITS
sh_flags = 0000000000000006h
.....................................................0.......... // SHF_TLS
......................................................0......... // SHF_GROUP
.......................................................0........ // SHF_OS_NONCONFORMING
........................................................0....... // SHF_LINK_ORDER
.........................................................0...... // SHF_INFO_LINK
..........................................................0..... // SHF_STRINGS
...........................................................0.... // SHF_MERGE
.............................................................1.. // SHF_EXECINSTR
..............................................................1. // SHF_ALLOC
...............................................................0 // SHF_WRITE
sh_addr = 0000000000400130h
sh_offset = 0000000000000130h
sh_size = 867.593 // 847,259 KiB
sh_link = 00000000h
sh_info = 00000000h
sh_addralign = 0000000000000010h
sh_entsize = 0 // 0 byte
// Export handler: Raw
// committed:FORMAT:Elf64_Shdr[0000000000104450h-0000000000104490h]
sh_name = 00000017h
sh_type = 00000001h // SHT_PROGBITS
sh_flags = 0000000000000006h
.....................................................0.......... // SHF_TLS
......................................................0......... // SHF_GROUP
.......................................................0........ // SHF_OS_NONCONFORMING
........................................................0....... // SHF_LINK_ORDER
.........................................................0...... // SHF_INFO_LINK
..........................................................0..... // SHF_STRINGS
...........................................................0.... // SHF_MERGE
.............................................................1.. // SHF_EXECINSTR
..............................................................1. // SHF_ALLOC
...............................................................0 // SHF_WRITE
sh_addr = 00000000004d3e39h
sh_offset = 00000000000d3e39h
sh_size = 8 // 8 byte
sh_link = 00000000h
sh_info = 00000000h
sh_addralign = 0000000000000001h
sh_entsize = 0 // 0 byte
// Export handler: Raw
// committed:FORMAT:Elf64_Shdr[0000000000104490h-00000000001044d0h]
sh_name = 0000001dh
sh_type = 00000001h // SHT_PROGBITS
sh_flags = 0000000000000002h
.....................................................0.......... // SHF_TLS
......................................................0......... // SHF_GROUP
.......................................................0........ // SHF_OS_NONCONFORMING
........................................................0....... // SHF_LINK_ORDER
.........................................................0...... // SHF_INFO_LINK
..........................................................0..... // SHF_STRINGS
...........................................................0.... // SHF_MERGE
.............................................................0.. // SHF_EXECINSTR
..............................................................1. // SHF_ALLOC
...............................................................0 // SHF_WRITE
sh_addr = 00000000004d3e60h
sh_offset = 00000000000d3e60h
sh_size = 196.241 // 191,642 KiB
sh_link = 00000000h
sh_info = 00000000h
sh_addralign = 0000000000000020h
sh_entsize = 0 // 0 byte
// Export handler: Raw
// committed:FORMAT:Elf64_Shdr[00000000001044d0h-0000000000104510h]
sh_name = 00000025h
sh_type = 00000001h // SHT_PROGBITS
sh_flags = 0000000000000002h
.....................................................0.......... // SHF_TLS
......................................................0......... // SHF_GROUP
.......................................................0........ // SHF_OS_NONCONFORMING
........................................................0....... // SHF_LINK_ORDER
.........................................................0...... // SHF_INFO_LINK
..........................................................0..... // SHF_STRINGS
...........................................................0.... // SHF_MERGE
.............................................................0.. // SHF_EXECINSTR
..............................................................1. // SHF_ALLOC
...............................................................0 // SHF_WRITE
sh_addr = 0000000000503cf4h
sh_offset = 0000000000103cf4h
sh_size = 4 // 4 byte
sh_link = 00000000h
sh_info = 00000000h
sh_addralign = 0000000000000004h
sh_entsize = 0 // 0 byte
// Export handler: Raw
// committed:FORMAT:Elf64_Shdr[0000000000104510h-0000000000104550h]
sh_name = 0000002fh
sh_type = 00000001h // SHT_PROGBITS
sh_flags = 0000000000000003h
.....................................................0.......... // SHF_TLS
......................................................0......... // SHF_GROUP
.......................................................0........ // SHF_OS_NONCONFORMING
........................................................0....... // SHF_LINK_ORDER
.........................................................0...... // SHF_INFO_LINK
..........................................................0..... // SHF_STRINGS
...........................................................0.... // SHF_MERGE
.............................................................0.. // SHF_EXECINSTR
..............................................................1. // SHF_ALLOC
...............................................................1 // SHF_WRITE
sh_addr = 0000000000703fd8h
sh_offset = 0000000000103fd8h
sh_size = 16 // 16 byte
sh_link = 00000000h
sh_info = 00000000h
sh_addralign = 0000000000000008h
sh_entsize = 0 // 0 byte
// Export handler: Raw
// committed:FORMAT:Elf64_Shdr[0000000000104550h-0000000000104590h]
sh_name = 00000036h
sh_type = 00000001h // SHT_PROGBITS
sh_flags = 0000000000000003h
.....................................................0.......... // SHF_TLS
......................................................0......... // SHF_GROUP
.......................................................0........ // SHF_OS_NONCONFORMING
........................................................0....... // SHF_LINK_ORDER
.........................................................0...... // SHF_INFO_LINK
..........................................................0..... // SHF_STRINGS
...........................................................0.... // SHF_MERGE
.............................................................0.. // SHF_EXECINSTR
..............................................................1. // SHF_ALLOC
...............................................................1 // SHF_WRITE
sh_addr = 0000000000703fe8h
sh_offset = 0000000000103fe8h
sh_size = 16 // 16 byte
sh_link = 00000000h
sh_info = 00000000h
sh_addralign = 0000000000000008h
sh_entsize = 0 // 0 byte
// Export handler: Raw
// committed:FORMAT:Elf64_Shdr[0000000000104590h-00000000001045d0h]
sh_name = 0000003dh
sh_type = 00000001h // SHT_PROGBITS
sh_flags = 0000000000000003h
.....................................................0.......... // SHF_TLS
......................................................0......... // SHF_GROUP
.......................................................0........ // SHF_OS_NONCONFORMING
........................................................0....... // SHF_LINK_ORDER
.........................................................0...... // SHF_INFO_LINK
..........................................................0..... // SHF_STRINGS
...........................................................0.... // SHF_MERGE
.............................................................0.. // SHF_EXECINSTR
..............................................................1. // SHF_ALLOC
...............................................................1 // SHF_WRITE
sh_addr = 0000000000703ff8h
sh_offset = 0000000000103ff8h
sh_size = 8 // 8 byte
sh_link = 00000000h
sh_info = 00000000h
sh_addralign = 0000000000000008h
sh_entsize = 0 // 0 byte
// Export handler: Raw
// committed:FORMAT:Elf64_Shdr[00000000001045d0h-0000000000104610h]
sh_name = 00000042h
sh_type = 00000001h // SHT_PROGBITS
sh_flags = 0000000000000003h
.....................................................0.......... // SHF_TLS
......................................................0......... // SHF_GROUP
.......................................................0........ // SHF_OS_NONCONFORMING
........................................................0....... // SHF_LINK_ORDER
.........................................................0...... // SHF_INFO_LINK
..........................................................0..... // SHF_STRINGS
...........................................................0.... // SHF_MERGE
.............................................................0.. // SHF_EXECINSTR
..............................................................1. // SHF_ALLOC
...............................................................1 // SHF_WRITE
sh_addr = 0000000000704000h
sh_offset = 0000000000104000h
sh_size = 831 // 831 byte
sh_link = 00000000h
sh_info = 00000000h
sh_addralign = 0000000000000020h
sh_entsize = 0 // 0 byte
// Export handler: Raw
// committed:FORMAT:Elf64_Shdr[0000000000104610h-0000000000104650h]
sh_name = 00000048h
sh_type = 00000008h // SHT_NOBITS
sh_flags = 0000000000000003h
.....................................................0.......... // SHF_TLS
......................................................0......... // SHF_GROUP
.......................................................0........ // SHF_OS_NONCONFORMING
........................................................0....... // SHF_LINK_ORDER
.........................................................0...... // SHF_INFO_LINK
..........................................................0..... // SHF_STRINGS
...........................................................0.... // SHF_MERGE
.............................................................0.. // SHF_EXECINSTR
..............................................................1. // SHF_ALLOC
...............................................................1 // SHF_WRITE
sh_addr = 0000000000704340h
sh_offset = 000000000010433fh
sh_size = 6.920 // 6,758 KiB
sh_link = 00000000h
sh_info = 00000000h
sh_addralign = 0000000000000020h
sh_entsize = 0 // 0 byte
// Export handler: Raw
// committed:FORMAT:Elf64_Shdr[0000000000104650h-0000000000104690h]
sh_name = 00000001h
sh_type = 00000003h // SHT_STRTAB
sh_flags = 0000000000000000h
.....................................................0.......... // SHF_TLS
......................................................0......... // SHF_GROUP
.......................................................0........ // SHF_OS_NONCONFORMING
........................................................0....... // SHF_LINK_ORDER
.........................................................0...... // SHF_INFO_LINK
..........................................................0..... // SHF_STRINGS
...........................................................0.... // SHF_MERGE
.............................................................0.. // SHF_EXECINSTR
..............................................................0. // SHF_ALLOC
...............................................................0 // SHF_WRITE
sh_addr = 0000000000000000h
sh_offset = 000000000010433fh
sh_size = 77 // 77 byte
sh_link = 00000000h
sh_info = 00000000h
sh_addralign = 0000000000000001h
sh_entsize = 0 // 0 byte
// Export handler: Raw
